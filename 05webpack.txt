webpack的常用使用规则：
1.新建项目目录，在项目目录下直接拿npm init 生成管理文件package.json
2.在当前目录下新建webpack.config.js文件用来管理工程
主要就是分为几大块：
（1）entry 是页面入口文件配置，可以是一个文件或者多个入口文件，可以是对象格式或者数组格式。
entry: {
    index : './src/main.js'
} 
entry:['./src/main.js','./src/index.js']
（2）output 是对应输出项配置,主要包括 path , filename 和 publishPath 属性。 path 代表输出的路径， filename 代表输出的文件名称， publishPath 代表静态资源发布后的前缀地址。
（3）module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理。
module: {
    //加载器配置
    loaders: [
        //.css 文件使用 style-loader 和 css-loader 来处理
        { test: /\.css$/, loader: 'style-loader!css-loader' },
        //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理
        { test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
        //图片文件使用 url-loader 来处理，小于8kb的直接转为base64
        { test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
    ]
}
（4）plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。
plugins: [
    //提公用js到common.js文件中
    new webpack.optimize.CommonsChunkPlugin('common.js'),
    //将样式统一发布到style.css中
    new ExtractTextPlugin("style.css", {
        allChunks: true,
        disable: false
    }),
    //使用ProvidePlugin加载使用频率高的模块
    new webpack.ProvidePlugin({
        $: "webpack-zepto"
    })
]
（5）resolve 配置
resolve: {
    // require时省略的扩展名，如：require('module') 不需要module.js
    extension: ['', '.js'],
    //别名
    alias: {
        filter: path.join(__dirname, 'src/filters')
    }
}
3.比较重要的就是安装npm install webpack-dev-server --save-dev  用于本地运行web pack服务。
4.新建一个入口文件entry.js，主要就是为了管理文件入口。




链接：http://www.cnblogs.com/shinggang/p/5034404.html?utm_source=tuicool&utm_medium=referral
